{"version":3,"sources":["api/index.js","pages/LandingScreen.js","App.js","serviceWorker.js","index.js"],"names":["queries","BOARD_NAME","gql","SUBSCRIBERS","CURRENT_USER","CurrentUser","useQuery","loading","error","data","className","Tooltip","title","me","name","placement","Avatar","alt","src","photo_original","LandingScreen","variables","ids","boards","httpLink","mondaySdk","createHttpLink","uri","authLink","setContext","_","headers","token","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","props","state","settings","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+2BAEA,IAkCeA,EAlCC,CAEdC,WAAYC,cAAF,KASVC,YAAaD,cAAF,KAYXE,aAAcF,cAAF,M,kBCHd,SAASG,IAAe,IAAD,EACYC,mBAASN,EAAQI,cAA1CG,EADa,EACbA,QAASC,EADI,EACJA,MAAOC,EADH,EACGA,KAExB,OAAIF,EAAgB,KAChBC,EAAc,uCAGhB,yBAAKE,UAAU,WACb,kBAACC,EAAA,EAAD,CAASC,MAAOH,EAAKI,GAAGC,KAAMC,UAAU,QACtC,kBAACC,EAAA,EAAD,CACEN,UAAU,SACVO,IAAKR,EAAKI,GAAGC,KACbI,IAAKT,EAAKI,GAAGM,mBAORC,MAlCf,WAA0B,IAAD,EACUd,mBAASN,EAAQC,WAAY,CAC5DoB,UAAW,CAAEC,IAAK,CAAC,cADbf,EADe,EACfA,QAASC,EADM,EACNA,MAAOC,EADD,EACCA,KAIxB,OAAIF,EAAgB,KAChBC,EAAc,uCAGhB,yBAAKE,UAAU,UACb,2BAAID,EAAKc,OAAO,GAAGT,MACnB,kBAACT,EAAD,QCHAmB,GAFSC,MAEEC,yBAAe,CAC9BC,IAAK,gCAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BC,EACJ,gLAEF,MAAO,CACLD,QAAQ,2BACHA,GADE,IAELE,cAAoB,iBAAaD,SAKjCE,EAAS,IAAIC,eAAa,CAC9BC,KAAMR,EAASS,OAAOb,GACtBc,MAAO,IAAIC,kBA6BEC,E,kDAzBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGDC,MAAQ,CACXC,SAAU,GACV7B,KAAM,IANS,E,kGAejB,OACE,kBAAC,iBAAD,CAAgBoB,OAAQA,GACtB,yBAAKxB,UAAU,eACb,kBAAC,EAAD,Y,GAnBQkC,IAAMC,WCzBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMuD,a","file":"static/js/main.1fb389ce.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nconst queries = {\r\n  // Returns the name of the passed board ID\r\n  BOARD_NAME: gql`\r\n    query BoardName($ids: [Int!]) {\r\n      boards(ids: $ids) {\r\n        name\r\n      }\r\n    }\r\n  `,\r\n\r\n  // Subscribers on this board\r\n  SUBSCRIBERS: gql`\r\n    query BoardSubscribers($ids: [Int!]) {\r\n      boards(ids: $ids) {\r\n        subscribers {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n  // Owner of this board\r\n  CURRENT_USER: gql`\r\n    query Me {\r\n      me {\r\n        id\r\n        name\r\n        photo_original\r\n      }\r\n    }\r\n  `,\r\n};\r\n\r\nexport default queries;\r\n","import React from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport queries from \"../api\";\r\n\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nfunction LandingScreen() {\r\n  const { loading, error, data } = useQuery(queries.BOARD_NAME, {\r\n    variables: { ids: [757616149] },\r\n  });\r\n\r\n  if (loading) return null;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <p>{data.boards[0].name}</p>\r\n      <CurrentUser />\r\n    </div>\r\n  );\r\n}\r\nfunction CurrentUser() {\r\n  const { loading, error, data } = useQuery(queries.CURRENT_USER);\r\n\r\n  if (loading) return null;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  return (\r\n    <div className=\"profile\">\r\n      <Tooltip title={data.me.name} placement=\"left\">\r\n        <Avatar\r\n          className=\"avatar\"\r\n          alt={data.me.name}\r\n          src={data.me.photo_original}\r\n        />\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingScreen;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport mondaySdk from \"monday-sdk-js\";\n\nimport LandingScreen from './pages/LandingScreen';\n\nconst monday = mondaySdk();\n\nconst httpLink = createHttpLink({\n  uri: \"https://api.monday.com/v2/\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token =\n    \"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjU4NzkyNDMyLCJ1aWQiOjE0OTcwODg2LCJpYWQiOiIyMDIwLTA3LTExVDE3OjUxOjA2LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSJ9.uC-owvux2QA0OdtWec5QcxxMNMFNtDWPDtHsyRkz3DQ\";\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {},\n      name: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n  }\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App primary\">\n          <LandingScreen />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./styles/site.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}