{"version":3,"sources":["globals/variables.js","api/index.js","components/Button/index.js","sections/AddNew/index.js","sections/Existing/index.js","pages/LandingScreen/index.js","App.js","serviceWorker.js","index.js"],"names":["_currentBoard","makeVar","queries","BOARD","gql","SUBSCRIBERS","CURRENT_USER","USERS_ITEMS","Button","large","medium","secondary","tertiary","text","classes","className","style","display","AddNew","console","log","monday","mondaySdk","initialState","storage","instance","getItem","then","res","data","value","version","length","JSON","parse","exampleData","id","name","setItem","stringify","Existing","useState","campaigns","Row","Col","map","campaign","key","LandingScreen","useQuery","variables","ids","loading","error","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","props","state","settings","triggerEvent","get","boardIds","listen","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f92f66ee.chunk.js","sourcesContent":["import { makeVar } from '@apollo/client';\r\n\r\nexport const _currentUser = makeVar();\r\n\r\nexport const _currentBoard = makeVar();","import { gql } from \"@apollo/client\";\r\n\r\nconst queries = {\r\n  // Returns the name of the passed board ID\r\n  BOARD: gql`\r\n    query BoardName($ids: [Int!]) {\r\n      me {\r\n        id\r\n        name\r\n        photo_original\r\n      }\r\n      boards(ids: $ids) {\r\n        name\r\n      }\r\n    }\r\n  `,\r\n\r\n  // Subscribers on this board\r\n  SUBSCRIBERS: gql`\r\n    query BoardSubscribers($ids: [Int!]) {\r\n      boards(ids: $ids) {\r\n        subscribers {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  `,\r\n\r\n  // Owner of this board\r\n  CURRENT_USER: gql`\r\n    query Me {\r\n      me {\r\n        id\r\n        name\r\n        photo_original\r\n      }\r\n    }\r\n  `,\r\n\r\n  // Owner of this board\r\n  USERS_ITEMS: gql`\r\n    query Me($ids: [Int!]) {\r\n      me {\r\n        id\r\n        name\r\n      }\r\n      boards(ids: $ids) {\r\n        items {\r\n          id\r\n          name\r\n          subscribers {\r\n            id\r\n          }\r\n          group {\r\n            id\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `,\r\n};\r\n\r\nexport default queries;\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\n\r\nfunction Button({ large, medium, secondary, tertiary, text }) {\r\n  let classes = \"\";\r\n\r\n  if (large) classes = \"btn-large \";\r\n  else if (medium) classes = \"btn-medium \";\r\n  else classes = \"btn-small \";\r\n\r\n  if (tertiary) classes += \"custom-btn-tertiary \";\r\n  else if (secondary) classes += \"custom-btn-secondary \";\r\n  else classes += \"custom-btn-primary \";\r\n\r\n  return (\r\n    <span className={classes}>\r\n      <p style={{ display: \"inline-block\" }}>{text}</p>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"../../components/Button\";\r\nimport \"./styles.scss\";\r\n\r\nfunction AddNew() {\r\n  console.log(\"add new\");\r\n  return (\r\n    <div className=\"add-new\">\r\n      <p className=\"text\">\r\n        Create a new <strong>campaign</strong>, <strong>project</strong> or{\" \"}\r\n        <strong>event</strong>.\r\n      </p>\r\n      <Button medium text=\"Add New\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddNew;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.scss\";\r\nimport mondaySdk from \"monday-sdk-js\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nconst monday = mondaySdk();\r\n\r\nlet initialState = [];\r\nmonday.storage.instance.getItem(\"campaigns\").then((res) => {\r\n  const { value, version } = res.data;\r\n  console.log(value);\r\n  //sleep(10000); // someone may overwrite serialKey during this time\r\n  if (value && value.length > 0) {\r\n    initialState = JSON.parse(value);\r\n  } else {\r\n    //temp\r\n    var exampleData = [\r\n      { id: 1, name: \"Marketing Campaign Example\" },\r\n      { id: 2, name: \"Restuarant Launch Example\" },\r\n    ];\r\n    monday.storage.instance\r\n      .setItem(\"campaigns\", JSON.stringify(exampleData))\r\n      .then((res) => {\r\n        console.log(res);\r\n      });\r\n    initialState = exampleData;\r\n  }\r\n});\r\n\r\nfunction Existing() {\r\n  const [campaigns, setCampaigns] = useState(initialState);\r\n\r\n  if (campaigns.length > 0) {\r\n    return (\r\n      <Row className=\"existing\">\r\n        <Col>\r\n          {campaigns.map((campaign) => {\r\n            return (\r\n              <Row>\r\n                <p key={campaign.id}>{campaign.name}</p>\r\n              </Row>\r\n            );\r\n          })}\r\n        </Col>\r\n      </Row>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default Existing;\r\n","import React from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport queries from \"../../api\";\r\nimport \"./styles.scss\";\r\nimport { _currentUser, _currentBoard } from \"../../globals/variables\";\r\n\r\n//custom\r\nimport AddNew from \"../../sections/AddNew\";\r\nimport Existing from '../../sections/Existing';\r\n\r\nfunction LandingScreen() {\r\n  const { loading, error, data } = useQuery(queries.BOARD, {\r\n    variables: { ids: _currentBoard() },\r\n  });\r\n\r\n  if (loading) return null;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <AddNew />\r\n        <Existing />\r\n        {/*<h2>{data.boards[0].name}</h2>\r\n        <div className=\"profile\">\r\n          <Tooltip title={data.me.name} placement=\"left\">\r\n            <Avatar\r\n              className=\"avatar\"\r\n              alt={data.me.name}\r\n              src={data.me.photo_original}\r\n            />\r\n          </Tooltip>\r\n        </div>*/}\r\n      </div>\r\n      {/*<MyItems />*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingScreen;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport mondaySdk from \"monday-sdk-js\";\nimport { _currentBoard } from \"./globals/variables\";\n\nimport LandingScreen from \"./pages/LandingScreen\";\n\nconst monday = mondaySdk();\n_currentBoard([0]);\n\nconst httpLink = createHttpLink({\n  uri: \"https://api.monday.com/v2/\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token =\n    \"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjU4NzkyNDMyLCJ1aWQiOjE0OTcwODg2LCJpYWQiOiIyMDIwLTA3LTExVDE3OjUxOjA2LjAwMFoiLCJwZXIiOiJtZTp3cml0ZSJ9.uC-owvux2QA0OdtWec5QcxxMNMFNtDWPDtHsyRkz3DQ\";\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {},\n      name: \"\",\n      triggerEvent: null,\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n    monday.get(\"context\").then((res) => {\n      //set global boardId\n      _currentBoard(res.data.boardIds[0]);\n    });\n\n    /*monday.storage.instance.getItem(\"campaigns\").then((res) => {\n      const { value, version } = res.data;\n      console.log(value);\n      //sleep(10000); // someone may overwrite serialKey during this time\n\n      monday.storage.instance\n        .setItem(\"test\", { previous_version: version })\n        .then((res) => {\n          console.log(res);\n        });\n    });*/\n\n    var callback = (res) => {\n      this.setState({\n        triggerEvent: res.data,\n      });\n    };\n    monday.listen(\"events\", callback);\n  }\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <LandingScreen key={this.state.triggerEvent} />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./styles/site.scss\";\nimport 'fontsource-roboto';\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}